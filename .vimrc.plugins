""" vim: ft=vim

""" ----- NeoBundle Setup
if version > 700
    filetype plugin indent off     " required!

    if has('vim_starting')
        if &compatible
            set nocompatible               " Be iMproved
        endif

        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif

    call neobundle#begin(expand('~/.vim/bundle/'))

    " Let NeoBundle manage NeoBundle
    " Required:
    NeoBundleFetch 'Shougo/neobundle.vim'

    " recommended to install
    NeoBundle 'Shougo/vimproc', {"build": {"mac": "make -f make_mac.mak", "unix": "make -f make_unix.mak"}}

    NeoBundleLazy 'Shougo/vimshell', {'autoload' : { 'commands' : [ 'VimShellBufferDir' ] }}
    NeoBundleLazy 'Shougo/vimfiler', {'autoload' : { 'commands' : [ 'VimFilerBufferDir' ] }, 'depends': [ 'Shougo/unite.vim' ]}
    "NeoBundle 'Shougo/vimfiler'

    " ----- My Bundles here
    NeoBundle 'editorconfig/editorconfig-vim'

    " color schemes
    NeoBundle 'nanotech/jellybeans.vim'
    NeoBundle 'w0ng/vim-hybrid'
    NeoBundle 'vim-scripts/twilight'
    NeoBundle 'jonathanfilip/vim-lucius'
    NeoBundle 'jpo/vim-railscasts-theme'
    NeoBundle 'altercation/vim-colors-solarized'
    NeoBundle 'vim-scripts/Wombat'
    NeoBundle 'tomasr/molokai'
    NeoBundle 'vim-scripts/rdark'
    NeoBundle 'chriskempson/vim-tomorrow-theme'
    NeoBundle 'sjl/badwolf'
    NeoBundle 'google/vim-colorscheme-primary'
    NeoBundle 'croaker/mustang-vim'

    " unite
    NeoBundle 'Shougo/unite.vim'
    if executable('pt')
        let g:unite_source_grep_command = 'pt'
        let g:unite_source_grep_default_opts = '--nogroup --nocolor'
        let g:unite_source_grep_recursive_opt = ''
        "let g:unite_source_grep_encoding = 'utf-8'
    endif

    " neocomplete
    NeoBundleLazy 'Shougo/neocomplete.vim', {"autoload": {"insert": 1}}
    let s:hooks = neobundle#get_hooks("neocomplete.vim")
    function! s:hooks.on_source(bundle)
        let g:neocomplete#enable_at_startup = 1
        let g:neocomplete#enable_insert_char_pre=1
        let g:acp_enableAtStartup = 0
        let g:neocomplete#enable_smart_case = 1
        let g:neocomplete#disable_auto_complete = 1
        let g:neocomplete#lock_iminsert = 1

        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
            "return neocomplete#smart_close_popup() . "\<CR>"
            "For no inserting <CR> key.
            return pumvisible() ? neocomplete#close_popup() : "\<CR>"
        endfunction
        inoremap <expr><nul> pumvisible() ? "\<down>" : neocomplete#start_manual_complete()
        inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
        inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
        inoremap <expr><BS>  neocomplete#smart_close_popup()."\<C-h>"
        inoremap <expr><C-y> neocomplete#close_popup()
        inoremap <expr><C-e> neocomplete#cancel_popup()

        " Enable omni completion.
        augroup neocomplete
            autocmd!
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
            autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        augroup END
    endfunction

    NeoBundleLazy 'Shougo/neosnippet.vim', {"autoload": {"insert": 1}}
    NeoBundleLazy 'Shougo/neosnippet-snippets', {"autoload": {"on_source": "neosnippet.vim"}}
    let s:hooks = neobundle#get_hooks('neosnippet.vim')
    function! s:hooks.on_source(bundle)
        " Plugin key-mappings.
        imap <C-k>     <Plug>(neosnippet_expand_or_jump)
        smap <C-k>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-k>     <Plug>(neosnippet_expand_target)
        " SuperTab like snippets behavior.
        imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
        " For snippet_complete marker.
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
    endfunction

    NeoBundleLazy 'bronson/vim-trailing-whitespace', {"autoload": {"insert": 1}}
    let g:extra_whitespace_ignored_filetypes = ['unite', 'mkd', 'vimfiler', 'vimshell']

    NeoBundle 'kana/vim-textobj-user'
    NeoBundle 'sgur/vim-textobj-parameter'

    NeoBundle 'kana/vim-operator-user'
    NeoBundle 'kana/vim-operator-replace'
    " operator-replace
    vnoremap R <Plug>(operator-replace)

    NeoBundle 'tpope/vim-surround'

    " outline editor
    "NeoBundleLazy 'vim-voom/VOoM'

    " increment extention
    "NeoBundle 'nishigori/increment-activator'

    NeoBundleLazy 'AnsiEsc.vim', {'autoload' : { 'commands' : [ 'AnsiEsc' ] }}
    NeoBundleLazy 'cocopon/colorswatch.vim', {'autoload' : { 'commands' : [ 'ColorSwatchGenerate' ] }}

    NeoBundle 'tpope/vim-fugitive'
    function! MyFugitive()
        try
            if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
                return 'âŽ‡ '.fugitive#head()
            endif
        catch
        endtry
        return ''
    endfunction

    " lightline
    NeoBundle 'cocopon/lightline-hybrid.vim'
    NeoBundle 'itchyny/lightline.vim'

    let s:hooks = neobundle#get_hooks('lightline.vim')
    function! s:hooks.on_source(bundle)

        " lightline setting
        let g:lightline = {}
        "let g:lightline.colorscheme = 'lightline-hybrid'
        let g:lightline.component = {}
        let g:lightline.component.rows = '%L lines'
        let g:lightline.component_function = {}
        let g:lightline.component_function.fugitive = 'MyFugitive'
        let g:lightline.active = {}
        let g:lightline.active.left = [['mode', 'paste'], ['readonly', 'relativepath', 'modified']]
        let g:lightline.active.right = [['lineinfo', 'rows'], ['fileformat', 'fileencoding', 'filetype'], ['fugitive']]
        let g:lightline.tabline = {}
        let g:lightline.tabline.right = [['close']]

        call lightline#init() | call lightline#colorscheme() | call lightline#update()

        command! -bar LightlineUpdate	source ~/.vimrc | call lightline#init() | call lightline#colorscheme() | call lightline#update()
    endfunction

    NeoBundle 'tyru/open-browser.vim'
    NeoBundle 'fuenor/qfixhowm.git'
    " howm
    let QFixHowm_Key = ','
    let howm_dir = "~/howm"
    let howm_instantpreview  = 0
    let howm_fileencoding    = 'utf-8'
    let howm_fileformat      = 'unix'

    NeoBundleLazy 'osyo-manga/unite-qfixhowm', {"autoload": {"unite_sources": ['qfixhowm']}}

    NeoBundle 'Shougo/neomru.vim'
    NeoBundleLazy 'Shougo/unite-outline', {"autoload": {"unite_sources": ['outline']}}
    NeoBundleLazy 'ujihisa/unite-colorscheme', {"autoload": {"unite_sources": ['colorscheme']}}

    NeoBundle 'matchparenpp'

    NeoBundleLazy 'vim-scripts/Align', {'autoload' : { 'commands' : [ 'Align' ] }}

    NeoBundleLazy 'mattn/excitetranslate-vim', { 'depends': 'mattn/webapi-vim', 'autoload' : { 'commands': ['ExciteTranslate'] } }
    xnoremap E :ExciteTranslate<CR>

    NeoBundleLazy 'tpope/vim-endwise', {"autoload": {"insert": 1}}

    NeoBundleLazy 'mattn/emmet-vim', {"autoload": {"filetypes": ['html']}}
    NeoBundleLazy 'toyamarinyon/vim-swift', {"autoload": {"filetypes": ['swift']}}
    NeoBundleLazy 'tpope/vim-markdown', {"autoload": {"filetypes": ['markdown']}}
    NeoBundle 'evidens/vim-twig', {"autoload": {"filetypes": ['php', 'html']}}

    call neobundle#end()

    " color scheme setting
    set background=dark
    colorscheme hybrid

    " If there are uninstalled bundles found on startup,
    " this will conveniently prompt you to install them.
    "NeoBundleCheck
endif

""" EOF
